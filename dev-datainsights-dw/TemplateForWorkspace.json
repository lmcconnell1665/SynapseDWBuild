{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "dev-datainsights-dw"
		},
		"AdventureWorks_SourceSQL_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AdventureWorks_SourceSQL'"
		},
		"dev-datainsights-dw-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'dev-datainsights-dw-WorkspaceDefaultSqlServer'"
		},
		"McConnell_KeyVault_properties_typeProperties_baseUrl": {
			"type": "string",
			"defaultValue": "https://@linkedService().KeyVaultName.vault.azure.net"
		},
		"dev-datainsights-dw-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://stgdevdw.dfs.core.windows.net"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/Load AdvWorks Source Data')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Bulk loads the tables from the DW database on the mcconnell server to the workspace bronze storage",
				"activities": [
					{
						"name": "Lookup tables to copy",
						"description": "Reference the AdventureWorks_ControlTable from the etlControl directory to see which tables to copy",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobFSReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"dataset": {
								"referenceName": "ETL_ControlTables",
								"type": "DatasetReference",
								"parameters": {
									"thisFileName": "AdventureWorks_ControlTable.csv"
								}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "Copy each table",
						"description": "Copies each of the tables specified in the previous lookup activity",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup tables to copy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup tables to copy').output.value",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy the table",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "ParquetSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "ParquetWriteSettings"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "AdvWorks_SourceTables",
											"type": "DatasetReference",
											"parameters": {
												"thisSchema": {
													"value": "@item().schema",
													"type": "Expression"
												},
												"thisTable": {
													"value": "@item().table",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "DataLake_Bronze",
											"type": "DatasetReference",
											"parameters": {
												"thisDataSourceDirectory": {
													"value": "AdvWorks/@{item().schema}",
													"type": "Expression"
												},
												"thisTableName": {
													"value": "@{item().table}.parquet",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/ETL_ControlTables')]",
				"[concat(variables('workspaceId'), '/datasets/AdvWorks_SourceTables')]",
				"[concat(variables('workspaceId'), '/datasets/DataLake_Bronze')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AdvWorks_SourceTables')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Parameterized connection to the Adventure Works source tables",
				"linkedServiceName": {
					"referenceName": "AdventureWorks_SourceSQL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"thisSchema": {
						"type": "string",
						"defaultValue": "dbo"
					},
					"thisTable": {
						"type": "string",
						"defaultValue": "DimCurrency"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": {
						"value": "@dataset().thisSchema",
						"type": "Expression"
					},
					"table": {
						"value": "@dataset().thisTable",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/AdventureWorks_SourceSQL')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/DataLake_Bronze')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Parameterized connection to the bronze directory of the workspace data lake",
				"linkedServiceName": {
					"referenceName": "dev-datainsights-dw-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"thisDataSourceDirectory": {
						"type": "string",
						"defaultValue": "AdvWorks"
					},
					"thisTableName": {
						"type": "string",
						"defaultValue": "DimCurrency"
					}
				},
				"annotations": [],
				"type": "Parquet",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().thisTableName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@dataset().thisDataSourceDirectory",
							"type": "Expression"
						},
						"fileSystem": "bronze"
					},
					"compressionCodec": "snappy"
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dev-datainsights-dw-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ETL_ControlTables')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "Parameterized connection to the etl control tables directory in the workspace default storage account",
				"linkedServiceName": {
					"referenceName": "dev-datainsights-dw-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"thisFileName": {
						"type": "string",
						"defaultValue": "AdventureWorks_ControlTable.csv"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().thisFileName",
							"type": "Expression"
						},
						"fileSystem": "etlcontrol"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/dev-datainsights-dw-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AdventureWorks_SourceSQL')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "AdventureWorks data warehouse tables stored on the mcconnell Azure SQL DB (serverless instance)",
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AdventureWorks_SourceSQL_connectionString')]",
					"password": {
						"type": "AzureKeyVaultSecret",
						"store": {
							"referenceName": "McConnell_KeyVault",
							"type": "LinkedServiceReference",
							"parameters": {
								"KeyVaultName": "McConnell-KeyVault-Dev"
							}
						},
						"secretName": "mcconnell-sql-admin-password"
					}
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]",
				"[concat(variables('workspaceId'), '/linkedServices/McConnell_KeyVault')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/McConnell_KeyVault')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"KeyVaultName": {
						"type": "string",
						"defaultValue": "McConnell-KeyVault-Dev"
					}
				},
				"annotations": [],
				"type": "AzureKeyVault",
				"typeProperties": {
					"baseUrl": "[parameters('McConnell_KeyVault_properties_typeProperties_baseUrl')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dev-datainsights-dw-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('dev-datainsights-dw-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/dev-datainsights-dw-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('dev-datainsights-dw-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		}
	]
}